###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Chunk(BaseModel):
    chunk_text: Optional[str] = None

class DemoExample(BaseModel):
    segment_type: Optional[types.SegmentType] = None
    segment_text: Optional[str] = None
    chunks: List["Chunk"]

class DemoExampleV2(BaseModel):
    segment_type: Optional[types.SegmentType] = None
    segment_text: Optional[str] = None
    chunks: List[str]

class Flashcard(BaseModel):
    type: Optional[types.FlashcardType] = None
    front: Optional[str] = None
    back: Optional[str] = None

class Segment(BaseModel):
    segment_number: Optional[int] = None
    segment_type: Optional[types.SegmentType] = None
    segment_text: Optional[str] = None

class SegmentRaw(BaseModel):
    segment_type: Optional[types.SegmentType] = None
    segment_text: Optional[str] = None

class StudyInput(BaseModel):
    topics: List["TopicSummaryWithSegments"]
    highlights: List[str]

class TopicSummaryWithSegments(BaseModel):
    topicSummary: Optional[str] = None
    segments: List["SegmentRaw"]
