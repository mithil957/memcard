###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type
from typing_extensions import NotRequired, Literal

import baml_py

from . import types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class AsyncHttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def CheckMergeAcrossPageBreak(
        self,
        context_before_page_break: List[types.SegmentRaw],context_after_page_break: List[types.SegmentRaw],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckMergeAcrossPageBreak",
        {
          "context_before_page_break": context_before_page_break,
          "context_after_page_break": context_after_page_break,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def ChunkSegment(
        self,
        instruction_text: str,demos: List[types.DemoExample],input_segment: types.SegmentRaw,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ChunkSegment",
        {
          "instruction_text": instruction_text,
          "demos": demos,
          "input_segment": input_segment,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def ChunkSegmentV2(
        self,
        instruction_text: str,demos: List[types.DemoExampleV2],input_segment: types.SegmentRaw,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ChunkSegmentV2",
        {
          "instruction_text": instruction_text,
          "demos": demos,
          "input_segment": input_segment,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateContextualTopicSummary(
        self,
        previous_topic_summary: str,next_topic_summary: str,segments: List[types.SegmentRaw],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateContextualTopicSummary",
        {
          "previous_topic_summary": previous_topic_summary,
          "next_topic_summary": next_topic_summary,
          "segments": segments,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateDocumentSummary(
        self,
        topic_summaries: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateDocumentSummary",
        {
          "topic_summaries": topic_summaries,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateFlashcardsDetailed(
        self,
        input: types.StudyInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateFlashcardsDetailed",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateFlashcardsSimple(
        self,
        input: types.StudyInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateFlashcardsSimple",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateTopicSummary(
        self,
        segments: List[types.SegmentRaw],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateTopicSummary",
        {
          "segments": segments,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def IdentifyMultipleTopicBoundaries(
        self,
        segments: List[types.Segment],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "IdentifyMultipleTopicBoundaries",
        {
          "segments": segments,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def SegmentPageImage(
        self,
        page_image: baml_py.Image,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "SegmentPageImage",
        {
          "page_image": page_image,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class AsyncHttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def CheckMergeAcrossPageBreak(
        self,
        context_before_page_break: List[types.SegmentRaw],context_after_page_break: List[types.SegmentRaw],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckMergeAcrossPageBreak",
        {
          "context_before_page_break": context_before_page_break,
          "context_after_page_break": context_after_page_break,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def ChunkSegment(
        self,
        instruction_text: str,demos: List[types.DemoExample],input_segment: types.SegmentRaw,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ChunkSegment",
        {
          "instruction_text": instruction_text,
          "demos": demos,
          "input_segment": input_segment,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def ChunkSegmentV2(
        self,
        instruction_text: str,demos: List[types.DemoExampleV2],input_segment: types.SegmentRaw,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ChunkSegmentV2",
        {
          "instruction_text": instruction_text,
          "demos": demos,
          "input_segment": input_segment,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateContextualTopicSummary(
        self,
        previous_topic_summary: str,next_topic_summary: str,segments: List[types.SegmentRaw],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateContextualTopicSummary",
        {
          "previous_topic_summary": previous_topic_summary,
          "next_topic_summary": next_topic_summary,
          "segments": segments,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateDocumentSummary(
        self,
        topic_summaries: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateDocumentSummary",
        {
          "topic_summaries": topic_summaries,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateFlashcardsDetailed(
        self,
        input: types.StudyInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateFlashcardsDetailed",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateFlashcardsSimple(
        self,
        input: types.StudyInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateFlashcardsSimple",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateTopicSummary(
        self,
        segments: List[types.SegmentRaw],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateTopicSummary",
        {
          "segments": segments,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def IdentifyMultipleTopicBoundaries(
        self,
        segments: List[types.Segment],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "IdentifyMultipleTopicBoundaries",
        {
          "segments": segments,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def SegmentPageImage(
        self,
        page_image: baml_py.Image,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "SegmentPageImage",
        {
          "page_image": page_image,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["AsyncHttpRequest", "AsyncHttpStreamRequest"]